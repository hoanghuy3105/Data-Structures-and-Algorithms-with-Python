{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CS2311-Algorithms and Data Structures With Python\n",
    "## Homework 3 P\n",
    "## Due Date: See BlackBoard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Student Name: Huy Huynh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Submission guidelines**\n",
    "\n",
    "‚Ä¢ Submit your Jupyter Notebook file on BlackBoard.  Please provide any supporting data input/output files in the zip folder.  Include images output in the zip file and embed in the notebook file.  I should be able to run and replicate your results.\n",
    "\n",
    "<pre>\n",
    "HW#.zip    -> HW3.zip\n",
    "</pre>\n",
    "\n",
    "**Grading Criteria:**\n",
    "<pre>\n",
    "‚Ä¢\tGood documentation/comments and program readability\n",
    "‚Ä¢\tAlgorithm/pseudo-code is explained and efficient\n",
    "‚Ä¢\tProgram runs correctly for test cases with no syntax errors or logical errors\n",
    "</pre>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic:  Algorithm Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.\t[40 points] Minimum in list algorithms ‚Äì benchmark and plot\n",
    "\n",
    "Write two Python functions to find the minimum number in a list. \n",
    "The first function, f_linear(), should do one pass through the list and be linear ùëÇ(ùëõ).\n",
    "The second function, called f_quadratic(), should compare each number to every other number on the list using nested loops giving a complexity of ùëÇ(ùëõ^2). \n",
    "Next, create a simple benchmark experiment using the timeit module as we did in class.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Algorithm Steps function 1:\n",
    "<pre>\n",
    "1. Set up a list of random number\n",
    "2. Pick one number in a list as an initial comparing vualue \n",
    "3. Use a loop to compare the initial value with the rest elements in the list\n",
    "4. When any number is smaller than the initial then set that number as a minimum number\n",
    "</pre>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enter your code with comments here function 1\n",
    "def f_linear(mylist):\n",
    "    temp=mylist[0]\n",
    "    for i in range(len(mylist)):\n",
    "        if temp >= mylist[i]:\n",
    "            temp=mylist[i]\n",
    "    return temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test case\n",
    "c = [10,12,15,9,50,23,7]\n",
    "f_linear(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Algorithm Steps function 2:\n",
    "<pre>\n",
    "1. Use given f_quadratic function\n",
    "2.\n",
    "3.\n",
    "...\n",
    "</pre>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enter your code with comments here function 2\n",
    "def f_quadratic(mylist):\n",
    "    l_min=mylist[0]\n",
    "    l=len(mylist)\n",
    "    for i in range(l):\n",
    "        for j in range(i+1,l):\n",
    "            if mylist[i]<mylist[j] and mylist[i]<l_min:\n",
    "                l_min=mylist[i]\n",
    "    return l_min"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test case\n",
    "c = [50,24,56,20,11]\n",
    "f_quadratic(c)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Size     Linear     Quad        Ratio\n",
      "   1000,    0.002,    0.054,         35\n",
      "   3000,    0.003,    0.442,        160\n",
      "   5000,    0.004,    1.172,        268\n",
      "   7000,    0.007,    2.350,        353\n",
      "   9000,    0.008,    3.988,        499\n",
      "  11000,    0.010,    5.670,        540\n",
      "  13000,    0.012,    7.831,        658\n",
      "  15000,    0.014,   10.832,        764\n",
      "  17000,    0.015,   13.705,        912\n",
      "  19000,    0.017,   17.244,       1026\n"
     ]
    }
   ],
   "source": [
    "import timeit\n",
    "import math\n",
    "size=[]\n",
    "f_Linear=[]\n",
    "f_Quad=[]\n",
    "f_log_n=[]\n",
    "f_n_log_n =[]\n",
    "print(\"   Size     Linear     Quad        Ratio\")\n",
    "for size_list in range(1000,20000,2000):  \n",
    "    SETUP_CODE = ''' \n",
    "from __main__ import f_linear \n",
    "from __main__ import f_quadratic \n",
    "from random import randrange\n",
    "                '''\n",
    "      \n",
    "    TEST_CODE_L= ''' \n",
    "mylist = [randrange(1, 1000) for i in range(%d)]\n",
    "f_linear(mylist) \n",
    "        '''\n",
    "    TEST_CODE_Q='''\n",
    "mylist = [randrange(1, 1000) for i in range(%d)]\n",
    "f_quadratic(mylist)\n",
    "        '''\n",
    "    # timeit.repeat statement \n",
    "    times_l = float(format(min(timeit.repeat(setup = SETUP_CODE, \n",
    "                          stmt = TEST_CODE_L %size_list,repeat=1, \n",
    "                          number = 1)))) \n",
    "    times_q = float(format(min(timeit.repeat(setup = SETUP_CODE, \n",
    "                          stmt = TEST_CODE_Q %size_list,repeat=1, \n",
    "                          number = 1))))\n",
    "  \n",
    "    # priniting minimum exec. time \n",
    "    print(\"%7d, %8.3f, %8.3f, %10d\" %(size_list,times_l,times_q,times_q/times_l))\n",
    "    size.append(size_list)\n",
    "    f_Linear.append(times_l)\n",
    "    f_Quad.append(times_q)\n",
    "    f_log_n.append(math.log(size_list))\n",
    "    f_n_log_n = f_log_n * size_list\n",
    "    #i dont know how to set up scale  for log(n) and nlog(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enter code for your plot here\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(size, f_Linear,\"r\")\n",
    "plt.plot(size, f_Quad,\"g\")\n",
    "plt.plot(size,f_log_n,\"y\")\n",
    "plt.plot(size, f_n_log_n,\"b\")\n",
    "plt.title(\"Run times\")\n",
    "plt.xlabel(\"Size\")\n",
    "plt.ylabel(\"Run Time\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
